/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.battleshipgame;

/**
 *
 * @author PeterMarion
 */


import java.awt.Color;
import java.awt.List;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JOptionPane;
 

public class Game extends javax.swing.JFrame {

    
    
    public Tile chosenTile;
    public static Tile startTile;
    public static int GAMESTATE = 0;   //0 = null, 1 = setup, 2 = game, 3 = endgame
    public static ArrayList possibleEndTiles;
    
    /**
     * Creates new form Game
     */
    public Game() {
        initComponents();
        GAMESTATE = 1;
        chosenTile = null;
                
        java.awt.GridBagConstraints gridBagConstraints;
        
        int i = -1,j = -1;  //for displaying grid labels (letters/numbers)
        
        //instantiate enemy board
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 8; j++) {
                Tile thisTile = enemyBoard.tiles[i][j];
                thisTile.setPreferredSize(new java.awt.Dimension(32, 32));
                thisTile.setBackground(Color.BLUE);
                thisTile.setForeground(Color.BLUE);
                thisTile.setEnabled(false); //in game state 1 (setup) we do not want to touch enemy tiles
                
                thisTile.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        enemyTilePressed(evt, enemyBoard, thisTile);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = j+1;
                gridBagConstraints.gridy = i+1;
                EnemyPanel.add(thisTile, gridBagConstraints);

            } 
        }
        
        //instantiate player board
        for (i = 0; i < 8; i++) {
            for (j = 0;j < 8; j++) {
                Tile thisTile = playerBoard.tiles[i][j];
                thisTile.setPreferredSize(new java.awt.Dimension(32, 32));
                thisTile.setBackground(Color.BLUE);
                thisTile.setForeground(Color.BLUE);
                
                thisTile.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        tilePressed(evt, playerBoard, thisTile);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = j+1;
                gridBagConstraints.gridy = i+1;
                PlayerPanel.add(thisTile, gridBagConstraints);

            } 
        }
        
        
//        GAMESTATE = 2;
        
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ControlPanel = new javax.swing.JPanel();
        GameTitle = new javax.swing.JLabel();
        ShipPanel = new javax.swing.JPanel();
        TextOutput = new javax.swing.JScrollPane();
        textOutput = new javax.swing.JTextArea();
        FireBtn = new javax.swing.JButton();
        GamePanel = new javax.swing.JPanel();
        EnemyPanel = new javax.swing.JPanel();
        PlayerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Battleship");
        setName("Battleship"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(900, 900));

        ControlPanel.setBackground(new java.awt.Color(230, 230, 230));
        ControlPanel.setSize(new java.awt.Dimension(720, 400));

        GameTitle.setFont(new java.awt.Font("Onyx", 1, 96)); // NOI18N
        GameTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GameTitle.setText("BATTLESHIP");

        ShipPanel.setBackground(new java.awt.Color(220, 220, 220));

        javax.swing.GroupLayout ShipPanelLayout = new javax.swing.GroupLayout(ShipPanel);
        ShipPanel.setLayout(ShipPanelLayout);
        ShipPanelLayout.setHorizontalGroup(
            ShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );
        ShipPanelLayout.setVerticalGroup(
            ShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 185, Short.MAX_VALUE)
        );

        textOutput.setEditable(false);
        textOutput.setColumns(20);
        textOutput.setRows(5);
        textOutput.setName("gameText"); // NOI18N
        TextOutput.setViewportView(textOutput);

        FireBtn.setText("FIRE");
        FireBtn.setName("FireBtn"); // NOI18N
        FireBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FireBtnPressed(evt);
            }
        });

        javax.swing.GroupLayout ControlPanelLayout = new javax.swing.GroupLayout(ControlPanel);
        ControlPanel.setLayout(ControlPanelLayout);
        ControlPanelLayout.setHorizontalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ControlPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(GameTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(48, 48, 48))
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(FireBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(ShipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TextOutput)
                .addContainerGap())
        );
        ControlPanelLayout.setVerticalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(GameTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ShipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(TextOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(FireBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        GamePanel.setBackground(new java.awt.Color(230, 230, 230));
        GamePanel.setSize(new java.awt.Dimension(800, 400));

        EnemyPanel.setBounds(new java.awt.Rectangle(0, 0, 100, 100));
        EnemyPanel.setEnabled(false);
        EnemyPanel.setMaximumSize(new java.awt.Dimension(350, 350));
        EnemyPanel.setMinimumSize(new java.awt.Dimension(350, 350));
        EnemyPanel.setLayout(new java.awt.GridBagLayout());

        PlayerPanel.setBounds(new java.awt.Rectangle(0, 0, 100, 100));
        PlayerPanel.setEnabled(false);
        PlayerPanel.setMaximumSize(new java.awt.Dimension(350, 350));
        PlayerPanel.setMinimumSize(new java.awt.Dimension(350, 350));
        PlayerPanel.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout GamePanelLayout = new javax.swing.GroupLayout(GamePanel);
        GamePanel.setLayout(GamePanelLayout);
        GamePanelLayout.setHorizontalGroup(
            GamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GamePanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(GamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EnemyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        GamePanelLayout.setVerticalGroup(
            GamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GamePanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(EnemyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(ControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(GamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(GamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void FireBtnPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FireBtnPressed
        // TODO add your handling code here:
        if(GAMESTATE == 2) {
            if (chosenTile == null) {
                textOutput.append("Select a tile\n");
            } else {
    //            int col = ((String)ColumnCB.getSelectedItem()).charAt(0)-64;
    //            int row = ((String)RowCB.getSelectedItem()).charAt(0)-48;
                int row = chosenTile.getRow();
                int col = chosenTile.getCol();  //may be wrong

                textOutput.append("You fired a rocket at " + (char)col + (row+1) + "\n");

    //            col--;  //decrement for index selection
    //            row--;

                //fire rocket function
            }
        } else {
            textOutput.append("The game has not begun\n");
        }
    }//GEN-LAST:event_FireBtnPressed


    
    
    

    private void tilePressed(java.awt.event.ActionEvent evt, Board board, Tile tile) {  
        // TODO add your handling code here:
        String output;
        Tile thisTile;
        Tile endTile;
        Tile placeHolderTile = new Tile(-1,-1);

        int col = tile.getCol()-65;
        int row = tile.getRow();    
        
        
        switch (GAMESTATE) {
            
            case 1://SETUP STATE
                
                if (tile == chosenTile) {//DESELECT TILE

                    chosenTile.resetColor();
                    chosenTile = null;
                    startTile = null;

                    //Reset colors of all highlighted end tiles
                    for (int i = 0; i < 4; i++) {
                        endTile = (Tile)possibleEndTiles.get(i);
                        endTile.resetColor();
                        possibleEndTiles.set(i, placeHolderTile);
                    }

                    output = "You deselected tile " + (char)(col+65) + (row+1) + "\n";
                    textOutput.append(output);

                } else if (tile.getDefaultColor() == Color.BLACK) {//TILE HAS SHIP
                    
                    //reset color of previous chosen tile
                    if (chosenTile != null) {
                        chosenTile.resetColor();          
                    }
                    
                    //reset color of all end tiles
                    //replace all end tiles with placeholder
                    for (int i = 0; i < 4; i++) {
                        endTile = (Tile)possibleEndTiles.get(i);
                        endTile.resetColor();
                        possibleEndTiles.set(i, placeHolderTile);
                    }
                        
                    textOutput.append("There is already a ship at this location\n");
                    
                } else {//NEW TILE CHOSEN

                    //reset color of previous chosen tile
                    if (chosenTile != null) {
                        chosenTile.resetColor();          
                    }
                    
                    chosenTile = tile;      //update chosenTile
                    chosenTile.setColor(Color.GRAY);

                    output = "You selected tile " + (char)(col+65) + (row+1) + "\n";
                    textOutput.append(output);

                    
                    
                    
                    
                    currentShip = (Ship)ships.get(shipsPlaced); //get the currentShip to be placed
                    int size = currentShip.getSize();
                    
                    //Get index. If returns -1, then chosen tile is a new start tile. Otherwise, 
                    //the index will denote the direction of said end tile from the current start 
                    //tile and therefore the direction of the ship
                    int index = possibleEndTiles.indexOf(tile);
                    
                    if (index == -1) {  //index is -1, so it is not an end tile. Must be either current start tile or new start tile

                        //reset color of all end tiles
                        //replace all end tiles with placeholder
                        for (int i = 0; i < 4; i++) {
                            endTile = (Tile)possibleEndTiles.get(i);
                            endTile.resetColor();
                            possibleEndTiles.set(i, placeHolderTile);
                        }

                        if (startTile != tile) {   //if selecting new tile
                            startTile = tile;
                            
                            boolean north = true;
                            boolean south = true;
                            boolean west = true;
                            boolean east = true;

                            if (row-size+1 < 0) {    //check if ship will fit north
                                north = false;
                            }
                            if (row+size-1 > 7) {    //check if ship will fit south
                                south = false;
                            }
                            if (col-size+1 < 0) {    //check if ship will fit west
                                west = false;
                            }
                            if (col+size-1 > 7) {    //check if ship will fit east
                                east = false;
                            }


                            for (int i = 1; i < size; i++) {   

                                if (north) {   //if north hasn't been ruled out yet
                                    //get tile which is i tiles north from tile pressed
                                    thisTile = board.getTile(tile.getRow() - i, tile.getCol()-65);
                                    //if ship exists in that tile, rule out north as a possible direction
                                    if (thisTile.getForeground() == Color.BLACK) {
                                       north = false;
                                    } else if (i == size-1) {
                                        possibleEndTiles.set(0, thisTile);
                                        thisTile.setColor(Color.YELLOW);
                                    }
                                } 
                                if (south) {   //if south hasn't been ruled out yet
                                    //get tile which is i tiles south from tile pressed
                                    thisTile = board.getTile(tile.getRow() + i, tile.getCol()-65);
                                    //if ship exists in that tile, rule out south as a possible direction
                                    if (thisTile.getForeground() == Color.BLACK) {
                                       south = false;
                                    } else if (i == size-1) {
                                        possibleEndTiles.set(1, thisTile);
                                        thisTile.setColor(Color.YELLOW);
                                    }
                                }
                                if (west) {   //if west hasn't been ruled out yet
                                    //get tile which is i tiles west from tile pressed
                                    thisTile = board.getTile(tile.getRow(), tile.getCol()-65 - i);
                                    //if ship exists in that tile, rule out west as a possible direction
                                    if (thisTile.getForeground() == Color.BLACK) {
                                       west = false;
                                    } else if (i == size-1) {
                                        possibleEndTiles.set(2, thisTile);
                                        thisTile.setColor(Color.YELLOW);
                                    }
                                }
                                if (east) {   //if east hasn't been ruled out yet
                                    //get tile which is i tiles east from tile pressed
                                    thisTile = board.getTile(tile.getRow(), tile.getCol()-65 + i);
                                    //if ship exists in that tile, rule out east as a possible direction
                                    if (thisTile.getForeground() == Color.BLACK) {
                                       east = false;
                                    } else if (i == size-1) {
                                        possibleEndTiles.set(3, thisTile);
                                        thisTile.setColor(Color.YELLOW);
                                    }
                                }
                            }
                        }

                    } else {//TILE IS A POSSIBLE END TILE
                        
                        //reset color of all end tiles
                        //replace all end tiles with placeholder
                        for (int i = 0; i < 4; i++) {
                            endTile = (Tile)possibleEndTiles.get(i);
                            endTile.resetColor();
                            possibleEndTiles.set(i, placeHolderTile);
                        }
                        
                        row = startTile.getRow();
                        col = startTile.getCol()-65;
                        
                        for (int i = 0; i < size; i++) {
                            switch (index) {
                                case 0: //north
                                    tile = board.getTile(row-i, col);
                                    tile.setDefaultColor(Color.BLACK);
                                    tile.resetColor();
                                    currentShip.location[i] = tile;
                                    break;
                                case 1: //south
                                    tile = board.getTile(row+i, col);
                                    tile.setDefaultColor(Color.BLACK);
                                    tile.resetColor();
                                    currentShip.location[i] = tile;
                                    break;
                                case 2: //west
                                    tile = board.getTile(row, col-i);
                                    tile.setDefaultColor(Color.BLACK);
                                    tile.resetColor();
                                    currentShip.location[i] = tile;
                                    break;
                                case 3: //east
                                    tile = board.getTile(row, col+i);
                                    tile.setDefaultColor(Color.BLACK);
                                    tile.resetColor();
                                    currentShip.location[i] = tile;
                                    break;
                            }
                        }
                            
                        
                        //reset possibleEndTiles
                        for (int i = 0; i < 4; i++) {
                            possibleEndTiles.set(i, placeHolderTile);
                        }
                        
                        //reset chosenTile so it does not get recolored blue
                        chosenTile = null;
                        
                        //NEXT SHIP
                        if (shipsPlaced < 4) {  //ships contains 5 ships, once all 5 are placed, continue to next game state
                            currentShip = (Ship)ships.get(++shipsPlaced);
                            textOutput.append("Choose a starting tile for your " + currentShip.getName() + " (Length " + currentShip.getSize() + ")\n");
                        } else {
                            GAMESTATE++;
                            //Enable all enemy buttons
                            for (int i = 0; i < 8; i++) {
                                for (int j = 0; j < 8; j++) {
                                    enemyBoard.getTile(i, j).setEnabled(true);
                                }
                            }
                            textOutput.append("Game state 2\n");
                        }
                    }
                    
                }
                
                break;
                 
                
            case 2://GAME STATE, GIVE TILE INFO
                
//                if (chosenTile != null) {
//                    chosenTile.setForeground(Color.BLUE);
//                    chosenTile.setBackground(Color.BLUE);
//                }
//                chosenTile = tile;
//                chosenTile.setForeground(Color.RED);
//                chosenTile.setBackground(Color.RED);
//                 
                break;

            default:        //endgame state, probably unnecessary
                break;
            }
    }
    
    private void enemyTilePressed(java.awt.event.ActionEvent evt, Board board, Tile tile) { 
        chosenTile = tile;
        switch (GAMESTATE) {
            case 1:
                break;
        }
    }
    
    
    
    
    
    
    public static Board playerBoard;
    public static Board enemyBoard;
    public static Ship currentShip;
    public static int shipsPlaced;
    public static ArrayList ships;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        playerBoard = new Board(1);
        enemyBoard = new Board(2);
        
        
        possibleEndTiles = new ArrayList<Tile>(4);
        Tile tile = new Tile(0,0);
        for (int i = 0; i < 4; i++) {possibleEndTiles.add(tile);}
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
        
        
        
        //PLACE SHIPS
        int result = JOptionPane.showConfirmDialog(null, "Would you like to choose your own ship locations?", "Place Ships", JOptionPane.YES_NO_OPTION);
        
        if (JOptionPane.NO_OPTION == result) {
            playerBoard.setRandom();
        } else {
            
//            //testing to see if code detects ship in the way
//            Tile qwer = playerBoard.getTile(3, 3);
//            qwer.setBackground(Color.BLACK);
//            qwer.setForeground(Color.BLACK);

            ships = new ArrayList<Ship>();
            boolean tryAgain;
            Ship thisShip;
            
            ships.add(new AircraftCarrier(1));
            ships.add(new Battleship(2));
            ships.add(new Cruiser(3));
            ships.add(new Submarine(5));
            ships.add(new Destroyer(4));
            
            shipsPlaced = 0;
            
            textOutput.append("Choose a starting tile for your Aircraft Carrier (Length 5)\n");
        }
        //END PLACE SHIPS PHASE
        
        
        
        
        //ask for heads or tails, if loss then enemy turn before game loop begins
//        String[] options = {"Heads", "Tails"};
//        int n = JOptionPane.showOptionDialog(null, "Heads or Tails?",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
//        result = JOptionPane.showOptionDialog(null, "Heads or Tails?", "Player Start", JOptionPane.YES_NO_OPTION, options););
//        
//        if (JOptionPane.NO_OPTION == result) {
//            playerBoard.setRandom();
//        } else {
//        
//        }
        


        //GAME LOOP
        
            //PLAYER TURN
            
            //ENEMY TURN
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JPanel EnemyPanel;
    private javax.swing.JButton FireBtn;
    private javax.swing.JPanel GamePanel;
    private javax.swing.JLabel GameTitle;
    private javax.swing.JPanel PlayerPanel;
    private javax.swing.JPanel ShipPanel;
    private javax.swing.JScrollPane TextOutput;
    public static javax.swing.JTextArea textOutput;
    // End of variables declaration//GEN-END:variables
}
